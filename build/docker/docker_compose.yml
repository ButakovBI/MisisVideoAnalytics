version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: analytics
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  api_service:
    image: misis-api_service
    ports:
      - "8000:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      ORCHESTRATOR_URL: http://orchestrator_service:8001
    depends_on:
      kafka:
        condition: service_healthy
      orchestrator_service:
        condition: service_started

  orchestrator_service:
    image: misis-orchestrator_service
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      DATABASE_URL: postgresql://postgres:postgres@postgres/analytics
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  runner_service:
    image: misis-runner_service
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      INFERENCE_URL: http://inference_service:8002/predict
    depends_on:
      inference_service:
        condition: service_started
      kafka:
        condition: service_healthy

  inference_service:
    image: misis-inference_service
    environment:
      MODEL_NAME: yolov8n

volumes:
  postgres_data:

networks:
  default:
    driver: bridge
    name: misis_network