version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    restart: on-failure
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - video-analytics-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    restart: on-failure
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_NUM_PARTITIONS: 1
    command: >
      sh -c "
        /etc/confluent/docker/run &


        until kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1; do
          sleep 1
        done;

        kafka-topics --bootstrap-server localhost:9092 --create --topic scenario_events --partitions 1 --replication-factor 1 || true;
        kafka-topics --bootstrap-server localhost:9092 --create --topic runner_commands --partitions 1 --replication-factor 1 || true;
        kafka-topics --bootstrap-server localhost:9092 --create --topic heartbeats --partitions 1 --replication-factor 1 || true;

        wait
      "
    healthcheck:
      test: [
        "CMD",
        "sh", "-c",
        "kafka-topics --bootstrap-server localhost:9092 --list | grep -x scenario_events"
      ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - video-analytics-network

  minio:
    image: bitnami/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: unless-stopped
    networks:
      - video-analytics-network
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_DEFAULT_BUCKETS: "videos,predictions"
    user: root
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 60s

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: scenarios
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=trust"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d scenarios"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - video-analytics-network

  orchestrator_service:
    image: misis-orchestrator_service
    restart: unless-stopped
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      HEARTBEAT_TIMEOUT: 30
      HEARTBEAT_CHECK_INTERVAL: 5
      DB_HOST: postgres
      DB_NAME: scenarios
      DB_USER: admin
      DB_PASSWORD: postgres
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - video-analytics-network

  inference_service:
    image: misis-inference_service
    ports:
      - "8001:8001"
    restart: unless-stopped
    healthcheck:
      disable: true
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8001/docs"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 30s
    networks:
      - video-analytics-network

  api_service:
    image: misis-api_service
    ports:
      - "8000:8000"
    restart: unless-stopped
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_VIDEOS_BUCKET: videos
      S3_PREDICTIONS_BUCKET: predictions
      DB_HOST: postgres
      DB_NAME: scenarios
      DB_USER: admin
      DB_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - video-analytics-network

  runner_service:
    image: misis-runner_service
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      INFERENCE_SERVICE_URL: http://localhost:8001
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_VIDEOS_BUCKET: videos
      S3_PREDICTIONS_BUCKET: predictions
      DB_HOST: postgres
      DB_NAME: scenarios
      DB_USER: admin
      DB_PASSWORD: postgres
      HEARTBEAT_CHECK_INTERVAL: 5
      MAX_CONCURRENT_SCENARIOS: 1
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - video-analytics-network

volumes:
  postgres_data:
  minio_data:

networks:
  video-analytics-network:
    driver: bridge
