version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    restart: on-failure
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - video-analytics-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    restart: on-failure
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_CREATE_TOPICS: "scenario_events:1:1,runner_commands:1:1,heartbeats:1:1"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - video-analytics-network

  minio:
    image: bitnami/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - video-analytics-network
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - /tmp/minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: scenarios
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d scenarios"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - video-analytics-network

  orchestrator_service:
    image: misis-orchestrator_service
    restart: unless-stopped
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      HEARTBEAT_TIMEOUT: 30
      HEARTBEAT_CHECK_INTERVAL: 5
      DB_HOST: postgres
      DB_NAME: scenarios
      DB_USER: admin
      DB_PASSWORD: postgres
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - video-analytics-network

  inference_service:
    image: misis-inference_service
    ports:
      - "8002:8002"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/docs"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - video-analytics-network

  api_service:
    image: misis-api_service
    ports:
      - "8000:8000"
    restart: unless-stopped
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_VIDEOS_BUCKET: videos
      S3_PREDICTIONS_BUCKET: predictions
      DB_HOST: postgres
      DB_NAME: scenarios
      DB_USER: admin
      DB_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
      orchestrator_service:
        condition: service_healthy
    networks:
      - video-analytics-network

  runner_service:
    image: misis-runner_service
    environment:
      RUNNER_ID: runner_${HOSTNAME}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      INFERENCE_SERVICE_URL: http://localhost:8002
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_VIDEOS_BUCKET: videos
      S3_PREDICTIONS_BUCKET: predictions
      DB_HOST: postgres
      DB_NAME: scenarios
      DB_USER: admin
      DB_PASSWORD: postgres
      HEARTBEAT_CHECK_INTERVAL: 5
      MAX_CONCURRENT_SCENARIOS: 1
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
      inference_service:
        condition: service_healthy
    networks:
      - video-analytics-network

volumes:
  postgres_data:

networks:
  video-analytics-network:
    driver: bridge
